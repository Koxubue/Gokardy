// <auto-generated />
using System;
using Gokardy.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gokardy.Migrations
{
    [DbContext(typeof(GokardyContext))]
    partial class GokardyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gokardy.Models.Adres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Panstwo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("Gokardy.Models.Gokard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NadwozieId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PodwozieId")
                        .HasColumnType("int");

                    b.Property<int>("SilnikId")
                        .HasColumnType("int");

                    b.Property<int>("TorId")
                        .HasColumnType("int");

                    b.Property<int>("Waga")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NadwozieId");

                    b.HasIndex("PodwozieId");

                    b.HasIndex("SilnikId");

                    b.HasIndex("TorId");

                    b.ToTable("Gokard");
                });

            modelBuilder.Entity("Gokardy.Models.Kierowca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumerKarty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("int");

                    b.Property<int>("Wiek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UzytkownikId")
                        .IsUnique();

                    b.ToTable("Kierowca");
                });

            modelBuilder.Entity("Gokardy.Models.KierowcaSponsor", b =>
                {
                    b.Property<int>("KierowcaId")
                        .HasColumnType("int");

                    b.Property<int>("SponsorId")
                        .HasColumnType("int");

                    b.HasKey("KierowcaId", "SponsorId");

                    b.HasIndex("SponsorId");

                    b.ToTable("KierowcaSponsor");
                });

            modelBuilder.Entity("Gokardy.Models.Nadwozie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Producent")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Nadwozie");
                });

            modelBuilder.Entity("Gokardy.Models.Podwozie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Producent")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Podwozie");
                });

            modelBuilder.Entity("Gokardy.Models.Pracownik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stanowisko")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TorId")
                        .HasColumnType("int");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("int");

                    b.Property<int>("Wiek")
                        .HasColumnType("int");

                    b.Property<double>("Wynagrodzenie")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("TorId");

                    b.HasIndex("UzytkownikId")
                        .IsUnique();

                    b.ToTable("Pracownik");
                });

            modelBuilder.Entity("Gokardy.Models.Przejazd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Czas")
                        .HasColumnType("date");

                    b.Property<int>("GokardId")
                        .HasColumnType("int");

                    b.Property<int>("KierowcaId")
                        .HasColumnType("int");

                    b.Property<int>("TorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GokardId");

                    b.HasIndex("KierowcaId");

                    b.HasIndex("TorId");

                    b.ToTable("Przejazd");
                });

            modelBuilder.Entity("Gokardy.Models.Silnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Moc")
                        .HasColumnType("int");

                    b.Property<int>("Pojemnosc")
                        .HasColumnType("int");

                    b.Property<string>("Producent")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Silnik");
                });

            modelBuilder.Entity("Gokardy.Models.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sponsor");
                });

            modelBuilder.Entity("Gokardy.Models.Sprzet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KierowcaId")
                        .HasColumnType("int");

                    b.Property<double>("Koszt")
                        .HasColumnType("float");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("KierowcaId");

                    b.ToTable("Sprzet");
                });

            modelBuilder.Entity("Gokardy.Models.Tor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdresId")
                        .HasColumnType("int");

                    b.Property<double>("Długosc")
                        .HasColumnType("float");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("StawkaGodzinowa")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AdresId")
                        .IsUnique();

                    b.ToTable("Tor");
                });

            modelBuilder.Entity("Gokardy.Models.Uzytkownik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Uzytkownik");
                });

            modelBuilder.Entity("Gokardy.Models.Gokard", b =>
                {
                    b.HasOne("Gokardy.Models.Nadwozie", "Nadwozie")
                        .WithMany("Gokard")
                        .HasForeignKey("NadwozieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gokardy.Models.Podwozie", "Podwozie")
                        .WithMany("Gokard")
                        .HasForeignKey("PodwozieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gokardy.Models.Silnik", "Silnik")
                        .WithMany("Gokard")
                        .HasForeignKey("SilnikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gokardy.Models.Tor", "Tor")
                        .WithMany("Gokard")
                        .HasForeignKey("TorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Gokardy.Models.Kierowca", b =>
                {
                    b.HasOne("Gokardy.Models.Uzytkownik", "Uzytkownik")
                        .WithOne("Kierowca")
                        .HasForeignKey("Gokardy.Models.Kierowca", "UzytkownikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Gokardy.Models.KierowcaSponsor", b =>
                {
                    b.HasOne("Gokardy.Models.Kierowca", "Kierowca")
                        .WithMany("KierowcaSponsor")
                        .HasForeignKey("KierowcaId")
                        .HasConstraintName("Kierowca_KierowcaSponsor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gokardy.Models.Sponsor", "Sponsor")
                        .WithMany("KierowcaSponsor")
                        .HasForeignKey("SponsorId")
                        .HasConstraintName("Sponsor_KierowcaSponsor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gokardy.Models.Pracownik", b =>
                {
                    b.HasOne("Gokardy.Models.Tor", "Tor")
                        .WithMany("Pracownik")
                        .HasForeignKey("TorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gokardy.Models.Uzytkownik", "Uzytkownik")
                        .WithOne("Pracownik")
                        .HasForeignKey("Gokardy.Models.Pracownik", "UzytkownikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Gokardy.Models.Przejazd", b =>
                {
                    b.HasOne("Gokardy.Models.Gokard", "Gokard")
                        .WithMany("Przejazd")
                        .HasForeignKey("GokardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gokardy.Models.Kierowca", "Kierowca")
                        .WithMany("Przejazd")
                        .HasForeignKey("KierowcaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gokardy.Models.Tor", "Tor")
                        .WithMany("Przejazd")
                        .HasForeignKey("TorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Gokardy.Models.Sprzet", b =>
                {
                    b.HasOne("Gokardy.Models.Kierowca", "Kierowca")
                        .WithMany("Sprzet")
                        .HasForeignKey("KierowcaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Gokardy.Models.Tor", b =>
                {
                    b.HasOne("Gokardy.Models.Adres", "Adres")
                        .WithOne("Tor")
                        .HasForeignKey("Gokardy.Models.Tor", "AdresId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
